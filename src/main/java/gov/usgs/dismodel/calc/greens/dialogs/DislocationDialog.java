package gov.usgs.dismodel.calc.greens.dialogs;
import java.awt.geom.Point2D;
import javax.swing.JTextField;
import javax.swing.UIManager;
import java.awt.Window;
import java.awt.Dialog;

/**
 * This Dialog box was generated within NetBeans and should be edited in
 * the NetBeans GUI editor only.
 * 
 * @author dmcmanamon
 */
public class DislocationDialog extends javax.swing.JDialog{
    private static final long serialVersionUID = 1L;
    protected boolean unitsAreXY = true;

    //private int focus = 0;

    protected static final int TOTAL_FIXED = 9;
    protected int nFixed = TOTAL_FIXED;

    protected JTextField filledXBox=null;
    protected JTextField filledYBox=null;
    
    public LeastSquareDialog2 lsDialog;

    /** Creates new form Dislocation */
    public DislocationDialog(Window parent) {
        super(parent, "Create a new Dislocation", Dialog.ModalityType.MODELESS);
        initComponents();
        lsDialog = new LeastSquareDialog2(1, 1);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        endpointsBG = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        wholePanel = new javax.swing.JPanel();
        namePanel = new javax.swing.JPanel();
        labName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        labShearMod = new javax.swing.JLabel();
        txtShearMod = new javax.swing.JTextField();
        whereIsDislocPanel = new javax.swing.JPanel();
        unitsLabel = new javax.swing.JLabel();
        unitsCB = new javax.swing.JComboBox();
        endpointsOrMidpointLabel = new javax.swing.JLabel();
        endPointsRB = new javax.swing.JRadioButton();
        endPointsPanel = new javax.swing.JPanel();
        point1Panel = new javax.swing.JPanel();
        upperBoundLabel = new javax.swing.JLabel();
        fixedLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        lowerBoundLabel = new javax.swing.JLabel();
        endpoint1xValue = new javax.swing.JTextField();
        endpoint1xUB = new javax.swing.JTextField();
        endpoint1xLB = new javax.swing.JTextField();
        endpoint1yValue = new javax.swing.JTextField();
        endpoint1yUB = new javax.swing.JTextField();
        endpoint1yLB = new javax.swing.JTextField();
        endpoint1yLabel = new javax.swing.JLabel();
        endpoint1xLabel = new javax.swing.JLabel();
        endpoint1Fixed = new javax.swing.JCheckBox();
        specifyEndpoint2 = new javax.swing.JCheckBox();
        point2Panel = new javax.swing.JPanel();
        endpoint2xLabel = new javax.swing.JLabel();
        endpoint2yLabel = new javax.swing.JLabel();
        endpoint2Fixed = new javax.swing.JCheckBox();
        endpoint2xValue = new javax.swing.JTextField();
        endpoint2yValue = new javax.swing.JTextField();
        endpoint2xLB = new javax.swing.JTextField();
        endpoint2yLB = new javax.swing.JTextField();
        endpoint2xUB = new javax.swing.JTextField();
        endpoint2yUB = new javax.swing.JTextField();
        midpointRB = new javax.swing.JRadioButton();
        midPointPanel = new javax.swing.JPanel();
        midpointxLabel = new javax.swing.JLabel();
        midpointyLabel = new javax.swing.JLabel();
        midpointFixed = new javax.swing.JCheckBox();
        midpointyValue = new javax.swing.JTextField();
        midpointxValue = new javax.swing.JTextField();
        midpointyLB = new javax.swing.JTextField();
        midpointxLB = new javax.swing.JTextField();
        midpointxUB = new javax.swing.JTextField();
        midpointyUB = new javax.swing.JTextField();
        depthPanel = new javax.swing.JPanel();
        depthLabel = new javax.swing.JLabel();
        depthFixed = new javax.swing.JCheckBox();
        depthValue = new javax.swing.JTextField();
        depthLB = new javax.swing.JTextField();
        depthUB = new javax.swing.JTextField();
        coordinatesAreUpperEdge = new javax.swing.JCheckBox();
        lookLikePanel = new javax.swing.JPanel();
        strikeLabel = new javax.swing.JLabel();
        dipLabel = new javax.swing.JLabel();
        selectTwoLabel = new javax.swing.JLabel();
        lengthCB = new javax.swing.JCheckBox();
        orientationLabel = new javax.swing.JLabel();
        specifyDimensionsLabel = new javax.swing.JLabel();
        aspectRatioFixed = new javax.swing.JCheckBox();
        aspectRatioCB = new javax.swing.JCheckBox();
        strikeValue = new javax.swing.JTextField();
        strikeLB = new javax.swing.JTextField();
        strikeUB = new javax.swing.JTextField();
        dipValue = new javax.swing.JTextField();
        dipLB = new javax.swing.JTextField();
        dipUB = new javax.swing.JTextField();
        widthCB = new javax.swing.JCheckBox();
        aspectRatioValue = new javax.swing.JTextField();
        aspectRatioLB = new javax.swing.JTextField();
        aspectRatioUB = new javax.swing.JTextField();
        lengthValue = new javax.swing.JTextField();
        lengthLB = new javax.swing.JTextField();
        lengthUB = new javax.swing.JTextField();
        widthValue = new javax.swing.JTextField();
        widthLB = new javax.swing.JTextField();
        widthUB = new javax.swing.JTextField();
        lengthFixed = new javax.swing.JCheckBox();
        widthFixed = new javax.swing.JCheckBox();
        strikeFixed = new javax.swing.JCheckBox();
        dipFixed = new javax.swing.JCheckBox();
        fixedLabel2 = new javax.swing.JLabel();
        lowerBoundLabel2 = new javax.swing.JLabel();
        upperBoundLabel2 = new javax.swing.JLabel();
        valueLabel2 = new javax.swing.JLabel();
        slipPanel = new javax.swing.JPanel();
        strikeSlipCB = new javax.swing.JCheckBox();
        SSValue = new javax.swing.JTextField();
        dipSlipCB = new javax.swing.JCheckBox();
        DSValue = new javax.swing.JTextField();
        openingCB = new javax.swing.JCheckBox();
        TSValue = new javax.swing.JTextField();
        distributedSlipPanel = new javax.swing.JPanel();
        dLengthLabel = new javax.swing.JLabel();
        deltaLength = new javax.swing.JTextField();
        dWidthLabel = new javax.swing.JLabel();
        deltaWidth = new javax.swing.JTextField();
        applyButton = new javax.swing.JButton();
        okayResetPanel = new javax.swing.JPanel();
        okayButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(494, 50));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        jScrollPane1.setBorder(null);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(494, 25));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(492, 822));
        jScrollPane1.setRequestFocusEnabled(false);

        wholePanel.setMaximumSize(new java.awt.Dimension(450, 802));
        wholePanel.setMinimumSize(new java.awt.Dimension(450, 802));
        wholePanel.setPreferredSize(new java.awt.Dimension(450, 802));
        wholePanel.setLayout(new javax.swing.BoxLayout(wholePanel, javax.swing.BoxLayout.PAGE_AXIS));

        namePanel.setMaximumSize(new java.awt.Dimension(494, 25));
        namePanel.setMinimumSize(new java.awt.Dimension(494, 25));
        namePanel.setLayout(new javax.swing.BoxLayout(namePanel, javax.swing.BoxLayout.LINE_AXIS));

        labName.setFont(new java.awt.Font("sansserif", 3, 14));
        labName.setText("Name:");
        namePanel.add(labName);

        txtName.setText("Fault");
        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });
        txtName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });
        namePanel.add(txtName);

        labShearMod.setFont(new java.awt.Font("sansserif", 3, 14));
        labShearMod.setText("Shear Mod:");
        namePanel.add(labShearMod);

        txtShearMod.setText("3.00E10");
        txtShearMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtShearModActionPerformed(evt);
            }
        });
        txtShearMod.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });
        namePanel.add(txtShearMod);

        wholePanel.add(namePanel);

        whereIsDislocPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Where is the dislocation?", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Dialog", 3, 14))); // NOI18N
        whereIsDislocPanel.setMaximumSize(new java.awt.Dimension(474, 420));
        whereIsDislocPanel.setMinimumSize(new java.awt.Dimension(474, 420));
        whereIsDislocPanel.setPreferredSize(new java.awt.Dimension(474, 420));
        whereIsDislocPanel.setLayout(new java.awt.GridBagLayout());

        unitsLabel.setText("Units Are:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 80, 0, 0);
        whereIsDislocPanel.add(unitsLabel, gridBagConstraints);

        unitsCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "XY (meters)", "Lat/Lng" }));
        unitsCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitsCBActionPerformed(evt);
            }
        });
        unitsCB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SSValueFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whereIsDislocPanel.add(unitsCB, gridBagConstraints);

        endpointsOrMidpointLabel.setText("Specify endpoints or midpoint.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whereIsDislocPanel.add(endpointsOrMidpointLabel, gridBagConstraints);

        endpointsBG.add(endPointsRB);
        endPointsRB.setSelected(true);
        endPointsRB.setText("Endpoints");
        endPointsRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endPointsRBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whereIsDislocPanel.add(endPointsRB, gridBagConstraints);

        endPointsPanel.setLayout(new java.awt.GridBagLayout());

        point1Panel.setAutoscrolls(true);
        point1Panel.setMaximumSize(new java.awt.Dimension(450, 92));
        point1Panel.setMinimumSize(new java.awt.Dimension(450, 92));
        point1Panel.setPreferredSize(new java.awt.Dimension(450, 92));
        point1Panel.setLayout(new java.awt.GridBagLayout());

        upperBoundLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        upperBoundLabel.setText("<html>Upper<br>Bound</html>");
        upperBoundLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 14;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        point1Panel.add(upperBoundLabel, gridBagConstraints);

        fixedLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        fixedLabel.setText("Fixed?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        point1Panel.add(fixedLabel, gridBagConstraints);

        valueLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        valueLabel.setText("Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        point1Panel.add(valueLabel, gridBagConstraints);

        lowerBoundLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        lowerBoundLabel.setText("<html>Lower<br>Bound</html>");
        lowerBoundLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        point1Panel.add(lowerBoundLabel, gridBagConstraints);
        lowerBoundLabel.getAccessibleContext().setAccessibleName("");

        endpoint1xValue.setMaximumSize(new java.awt.Dimension(30, 28));
        endpoint1xValue.setMinimumSize(new java.awt.Dimension(30, 28));
        endpoint1xValue.setPreferredSize(new java.awt.Dimension(30, 28));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, endpoint1Fixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && selected}"), endpoint1xValue, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        endpoint1xValue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                endpoint1xValueFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        point1Panel.add(endpoint1xValue, gridBagConstraints);

        endpoint1xUB.setMaximumSize(new java.awt.Dimension(30, 28));
        endpoint1xUB.setMinimumSize(new java.awt.Dimension(30, 28));
        endpoint1xUB.setPreferredSize(new java.awt.Dimension(30, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, endpoint1Fixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && !selected}"), endpoint1xUB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        endpoint1xUB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                endpoint1xUBFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 14;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        point1Panel.add(endpoint1xUB, gridBagConstraints);

        endpoint1xLB.setMaximumSize(new java.awt.Dimension(30, 28));
        endpoint1xLB.setMinimumSize(new java.awt.Dimension(30, 28));
        endpoint1xLB.setPreferredSize(new java.awt.Dimension(30, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, endpoint1Fixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && !selected}"), endpoint1xLB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        endpoint1xLB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                endpoint1xLBFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        point1Panel.add(endpoint1xLB, gridBagConstraints);

        endpoint1yValue.setMaximumSize(new java.awt.Dimension(30, 28));
        endpoint1yValue.setMinimumSize(new java.awt.Dimension(30, 28));
        endpoint1yValue.setPreferredSize(new java.awt.Dimension(30, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, endpoint1Fixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && selected}"), endpoint1yValue, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        endpoint1yValue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                endpoint1yValueFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        point1Panel.add(endpoint1yValue, gridBagConstraints);

        endpoint1yUB.setMaximumSize(new java.awt.Dimension(30, 28));
        endpoint1yUB.setMinimumSize(new java.awt.Dimension(30, 28));
        endpoint1yUB.setPreferredSize(new java.awt.Dimension(30, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, endpoint1Fixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && !selected}"), endpoint1yUB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        endpoint1yUB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                endpoint1yUBFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 14;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        point1Panel.add(endpoint1yUB, gridBagConstraints);

        endpoint1yLB.setMaximumSize(new java.awt.Dimension(30, 28));
        endpoint1yLB.setMinimumSize(new java.awt.Dimension(30, 28));
        endpoint1yLB.setPreferredSize(new java.awt.Dimension(30, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, endpoint1Fixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && !selected}"), endpoint1yLB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        endpoint1yLB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                endpoint1yLBFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        point1Panel.add(endpoint1yLB, gridBagConstraints);

        endpoint1yLabel.setText("endpoint 1 y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        point1Panel.add(endpoint1yLabel, gridBagConstraints);

        endpoint1xLabel.setText("endpoint 1 x");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        point1Panel.add(endpoint1xLabel, gridBagConstraints);

        endpoint1Fixed.setSelected(true);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, endPointsRB, org.jdesktop.beansbinding.ELProperty.create("${selected}"), endpoint1Fixed, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        endpoint1Fixed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endpoint1FixedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
        point1Panel.add(endpoint1Fixed, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        endPointsPanel.add(point1Panel, gridBagConstraints);

        specifyEndpoint2.setSelected(true);
        specifyEndpoint2.setText("<html>Specify/Optimize endpoint 2 (Length, strike and aspect ratio are <BR> unused or fixed accordingly)</html>");
        specifyEndpoint2.setActionCommand("<html>Specify/Optimize endpoint 2 (Length, strike and aspect ratio are unused <BR> or fixed accordingly)</html>");
        specifyEndpoint2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, endPointsRB, org.jdesktop.beansbinding.ELProperty.create("${selected}"), specifyEndpoint2, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        specifyEndpoint2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                specifyEndpoint2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        endPointsPanel.add(specifyEndpoint2, gridBagConstraints);

        point2Panel.setMaximumSize(new java.awt.Dimension(450, 70));
        point2Panel.setMinimumSize(new java.awt.Dimension(450, 70));
        point2Panel.setPreferredSize(new java.awt.Dimension(450, 70));
        point2Panel.setLayout(new java.awt.GridBagLayout());

        endpoint2xLabel.setText("endpoint 2 x");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        point2Panel.add(endpoint2xLabel, gridBagConstraints);

        endpoint2yLabel.setText("endpoint 2 y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        point2Panel.add(endpoint2yLabel, gridBagConstraints);

        endpoint2Fixed.setSelected(true);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, specifyEndpoint2, org.jdesktop.beansbinding.ELProperty.create("${enabled && selected}"), endpoint2Fixed, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        endpoint2Fixed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endpoint2FixedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
        point2Panel.add(endpoint2Fixed, gridBagConstraints);

        endpoint2xValue.setMaximumSize(new java.awt.Dimension(30, 28));
        endpoint2xValue.setMinimumSize(new java.awt.Dimension(30, 28));
        endpoint2xValue.setPreferredSize(new java.awt.Dimension(30, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, endpoint2Fixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && selected}"), endpoint2xValue, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        endpoint2xValue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                endpoint2xValueFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        point2Panel.add(endpoint2xValue, gridBagConstraints);

        endpoint2yValue.setMaximumSize(new java.awt.Dimension(30, 28));
        endpoint2yValue.setMinimumSize(new java.awt.Dimension(30, 28));
        endpoint2yValue.setPreferredSize(new java.awt.Dimension(30, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, endpoint2Fixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && selected}"), endpoint2yValue, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        endpoint2yValue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                endpoint2yValueFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        point2Panel.add(endpoint2yValue, gridBagConstraints);

        endpoint2xLB.setMaximumSize(new java.awt.Dimension(30, 28));
        endpoint2xLB.setMinimumSize(new java.awt.Dimension(30, 28));
        endpoint2xLB.setPreferredSize(new java.awt.Dimension(30, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, endpoint2Fixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && !selected}"), endpoint2xLB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        endpoint2xLB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                endpoint2xLBFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 11;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        point2Panel.add(endpoint2xLB, gridBagConstraints);

        endpoint2yLB.setMaximumSize(new java.awt.Dimension(30, 28));
        endpoint2yLB.setMinimumSize(new java.awt.Dimension(30, 28));
        endpoint2yLB.setPreferredSize(new java.awt.Dimension(30, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, endpoint2Fixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && !selected}"), endpoint2yLB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        endpoint2yLB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                endpoint2yLBFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 11;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        point2Panel.add(endpoint2yLB, gridBagConstraints);

        endpoint2xUB.setMaximumSize(new java.awt.Dimension(30, 28));
        endpoint2xUB.setMinimumSize(new java.awt.Dimension(30, 28));
        endpoint2xUB.setPreferredSize(new java.awt.Dimension(30, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, endpoint2Fixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && !selected}"), endpoint2xUB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        endpoint2xUB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                endpoint2xUBFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 15;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        point2Panel.add(endpoint2xUB, gridBagConstraints);

        endpoint2yUB.setMaximumSize(new java.awt.Dimension(30, 28));
        endpoint2yUB.setMinimumSize(new java.awt.Dimension(30, 28));
        endpoint2yUB.setPreferredSize(new java.awt.Dimension(30, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, endpoint2Fixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && !selected}"), endpoint2yUB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        endpoint2yUB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endpoint2yUBActionPerformed(evt);
            }
        });
        endpoint2yUB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                endpoint2yUBFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 15;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        point2Panel.add(endpoint2yUB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        endPointsPanel.add(point2Panel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whereIsDislocPanel.add(endPointsPanel, gridBagConstraints);

        endpointsBG.add(midpointRB);
        midpointRB.setText("Midpoint");
        midpointRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                midpointRBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whereIsDislocPanel.add(midpointRB, gridBagConstraints);

        midPointPanel.setMaximumSize(new java.awt.Dimension(450, 70));
        midPointPanel.setMinimumSize(new java.awt.Dimension(450, 70));
        midPointPanel.setPreferredSize(new java.awt.Dimension(450, 70));
        midPointPanel.setLayout(new java.awt.GridBagLayout());

        midpointxLabel.setText("midpoint x");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        midPointPanel.add(midpointxLabel, gridBagConstraints);

        midpointyLabel.setText("midpoint y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        midPointPanel.add(midpointyLabel, gridBagConstraints);

        midpointFixed.setSelected(true);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, midpointRB, org.jdesktop.beansbinding.ELProperty.create("${selected}"), midpointFixed, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        midpointFixed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                midpointFixedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
        midPointPanel.add(midpointFixed, gridBagConstraints);

        midpointyValue.setMaximumSize(new java.awt.Dimension(30, 28));
        midpointyValue.setMinimumSize(new java.awt.Dimension(30, 28));
        midpointyValue.setPreferredSize(new java.awt.Dimension(30, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, midpointFixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && selected}"), midpointyValue, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        midpointyValue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                midpointyValueFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        midPointPanel.add(midpointyValue, gridBagConstraints);

        midpointxValue.setMaximumSize(new java.awt.Dimension(30, 28));
        midpointxValue.setMinimumSize(new java.awt.Dimension(30, 28));
        midpointxValue.setPreferredSize(new java.awt.Dimension(30, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, midpointFixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && selected}"), midpointxValue, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        midpointxValue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                midpointxValueFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        midPointPanel.add(midpointxValue, gridBagConstraints);

        midpointyLB.setMaximumSize(new java.awt.Dimension(30, 28));
        midpointyLB.setMinimumSize(new java.awt.Dimension(30, 28));
        midpointyLB.setPreferredSize(new java.awt.Dimension(30, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, midpointFixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && !selected}"), midpointyLB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        midpointyLB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                midpointyLBFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        midPointPanel.add(midpointyLB, gridBagConstraints);

        midpointxLB.setMaximumSize(new java.awt.Dimension(30, 28));
        midpointxLB.setMinimumSize(new java.awt.Dimension(30, 28));
        midpointxLB.setPreferredSize(new java.awt.Dimension(30, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, midpointFixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && !selected}"), midpointxLB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        midpointxLB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                midpointxLBFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        midPointPanel.add(midpointxLB, gridBagConstraints);

        midpointxUB.setMaximumSize(new java.awt.Dimension(30, 28));
        midpointxUB.setMinimumSize(new java.awt.Dimension(30, 28));
        midpointxUB.setPreferredSize(new java.awt.Dimension(30, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, midpointFixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && !selected}"), midpointxUB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        midpointxUB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                midpointxUBFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 14;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        midPointPanel.add(midpointxUB, gridBagConstraints);

        midpointyUB.setMaximumSize(new java.awt.Dimension(30, 28));
        midpointyUB.setMinimumSize(new java.awt.Dimension(30, 28));
        midpointyUB.setPreferredSize(new java.awt.Dimension(30, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, midpointFixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && !selected}"), midpointyUB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        midpointyUB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                midpointyUBFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 14;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        midPointPanel.add(midpointyUB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whereIsDislocPanel.add(midPointPanel, gridBagConstraints);

        depthPanel.setMaximumSize(new java.awt.Dimension(450, 45));
        depthPanel.setMinimumSize(new java.awt.Dimension(450, 45));
        depthPanel.setPreferredSize(new java.awt.Dimension(450, 45));
        depthPanel.setLayout(new java.awt.GridBagLayout());

        depthLabel.setText("Depth");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 52;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        depthPanel.add(depthLabel, gridBagConstraints);

        depthFixed.setSelected(true);
        depthFixed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depthFixedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
        depthPanel.add(depthFixed, gridBagConstraints);

        depthValue.setMaximumSize(new java.awt.Dimension(30, 28));
        depthValue.setMinimumSize(new java.awt.Dimension(30, 28));
        depthValue.setPreferredSize(new java.awt.Dimension(30, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, depthFixed, org.jdesktop.beansbinding.ELProperty.create("${selected}"), depthValue, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        depthValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depthValueActionPerformed(evt);
            }
        });
        depthValue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        depthPanel.add(depthValue, gridBagConstraints);

        depthLB.setMaximumSize(new java.awt.Dimension(30, 28));
        depthLB.setMinimumSize(new java.awt.Dimension(30, 28));
        depthLB.setPreferredSize(new java.awt.Dimension(30, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, depthFixed, org.jdesktop.beansbinding.ELProperty.create("${!selected}"), depthLB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        depthLB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        depthPanel.add(depthLB, gridBagConstraints);

        depthUB.setMaximumSize(new java.awt.Dimension(30, 28));
        depthUB.setMinimumSize(new java.awt.Dimension(30, 28));
        depthUB.setPreferredSize(new java.awt.Dimension(30, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, depthFixed, org.jdesktop.beansbinding.ELProperty.create("${!selected}"), depthUB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        depthUB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 13;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        depthPanel.add(depthUB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whereIsDislocPanel.add(depthPanel, gridBagConstraints);

        coordinatesAreUpperEdge.setSelected(true);
        coordinatesAreUpperEdge.setText("These are coordinates for the upper edge");
        coordinatesAreUpperEdge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coordinatesAreUpperEdgeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        whereIsDislocPanel.add(coordinatesAreUpperEdge, gridBagConstraints);

        wholePanel.add(whereIsDislocPanel);

        lookLikePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "What does the dislocation look like?", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Dialog", 3, 14))); // NOI18N
        lookLikePanel.setMaximumSize(new java.awt.Dimension(472, 230));
        lookLikePanel.setMinimumSize(new java.awt.Dimension(472, 230));
        lookLikePanel.setPreferredSize(new java.awt.Dimension(472, 230));
        lookLikePanel.setLayout(new java.awt.GridBagLayout());

        strikeLabel.setText("Strike");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        lookLikePanel.add(strikeLabel, gridBagConstraints);

        dipLabel.setText("Dip");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        lookLikePanel.add(dipLabel, gridBagConstraints);

        selectTwoLabel.setFont(new java.awt.Font("sansserif", 1, 13));
        selectTwoLabel.setText("(Select Two)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        lookLikePanel.add(selectTwoLabel, gridBagConstraints);

        lengthCB.setText("Length");
        lengthCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lengthCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        lookLikePanel.add(lengthCB, gridBagConstraints);

        orientationLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        orientationLabel.setText("Orientation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        lookLikePanel.add(orientationLabel, gridBagConstraints);

        specifyDimensionsLabel.setFont(new java.awt.Font("sansserif", 1, 13));
        specifyDimensionsLabel.setText("Specify Dimensions");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        lookLikePanel.add(specifyDimensionsLabel, gridBagConstraints);

        aspectRatioFixed.setSelected(true);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, aspectRatioCB, org.jdesktop.beansbinding.ELProperty.create("${selected}"), aspectRatioFixed, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        aspectRatioFixed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aspectRatioFixedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        lookLikePanel.add(aspectRatioFixed, gridBagConstraints);

        aspectRatioCB.setText("Aspect Ratio (L/W)");
        aspectRatioCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aspectRatioCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        lookLikePanel.add(aspectRatioCB, gridBagConstraints);

        strikeValue.setMinimumSize(new java.awt.Dimension(70, 28));
        strikeValue.setPreferredSize(new java.awt.Dimension(70, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, strikeFixed, org.jdesktop.beansbinding.ELProperty.create("${selected}"), strikeValue, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        strikeValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strikeValueActionPerformed(evt);
            }
        });
        strikeValue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        lookLikePanel.add(strikeValue, gridBagConstraints);

        strikeLB.setMinimumSize(new java.awt.Dimension(70, 28));
        strikeLB.setPreferredSize(new java.awt.Dimension(70, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, strikeFixed, org.jdesktop.beansbinding.ELProperty.create("${!selected}"), strikeLB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        strikeLB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strikeLBActionPerformed(evt);
            }
        });
        strikeLB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        lookLikePanel.add(strikeLB, gridBagConstraints);

        strikeUB.setMinimumSize(new java.awt.Dimension(70, 28));
        strikeUB.setPreferredSize(new java.awt.Dimension(70, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, strikeFixed, org.jdesktop.beansbinding.ELProperty.create("${!selected}"), strikeUB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        strikeUB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strikeUBActionPerformed(evt);
            }
        });
        strikeUB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 15;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        lookLikePanel.add(strikeUB, gridBagConstraints);

        dipValue.setMinimumSize(new java.awt.Dimension(70, 28));
        dipValue.setPreferredSize(new java.awt.Dimension(70, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, dipFixed, org.jdesktop.beansbinding.ELProperty.create("${selected}"), dipValue, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        dipValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dipValueActionPerformed(evt);
            }
        });
        dipValue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        lookLikePanel.add(dipValue, gridBagConstraints);

        dipLB.setMinimumSize(new java.awt.Dimension(70, 28));
        dipLB.setPreferredSize(new java.awt.Dimension(70, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, dipFixed, org.jdesktop.beansbinding.ELProperty.create("${!selected}"), dipLB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        dipLB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dipLBActionPerformed(evt);
            }
        });
        dipLB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        lookLikePanel.add(dipLB, gridBagConstraints);

        dipUB.setMinimumSize(new java.awt.Dimension(70, 28));
        dipUB.setPreferredSize(new java.awt.Dimension(70, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, dipFixed, org.jdesktop.beansbinding.ELProperty.create("${!selected}"), dipUB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        dipUB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dipUBActionPerformed(evt);
            }
        });
        dipUB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 15;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        lookLikePanel.add(dipUB, gridBagConstraints);

        widthCB.setText("Width");
        widthCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                widthCBActionPerformed(evt);
            }
        });
        widthCB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        lookLikePanel.add(widthCB, gridBagConstraints);

        aspectRatioValue.setMinimumSize(new java.awt.Dimension(70, 28));
        aspectRatioValue.setPreferredSize(new java.awt.Dimension(70, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, aspectRatioFixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && selected}"), aspectRatioValue, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        aspectRatioValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aspectRatioValueActionPerformed(evt);
            }
        });
        aspectRatioValue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        lookLikePanel.add(aspectRatioValue, gridBagConstraints);

        aspectRatioLB.setMinimumSize(new java.awt.Dimension(70, 28));
        aspectRatioLB.setPreferredSize(new java.awt.Dimension(70, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, aspectRatioFixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && !selected}"), aspectRatioLB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        aspectRatioLB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aspectRatioLBActionPerformed(evt);
            }
        });
        aspectRatioLB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        lookLikePanel.add(aspectRatioLB, gridBagConstraints);

        aspectRatioUB.setMinimumSize(new java.awt.Dimension(70, 28));
        aspectRatioUB.setPreferredSize(new java.awt.Dimension(70, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, aspectRatioFixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && !selected}"), aspectRatioUB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        aspectRatioUB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aspectRatioUBActionPerformed(evt);
            }
        });
        aspectRatioUB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 15;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        lookLikePanel.add(aspectRatioUB, gridBagConstraints);

        lengthValue.setMinimumSize(new java.awt.Dimension(70, 28));
        lengthValue.setPreferredSize(new java.awt.Dimension(70, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, lengthFixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && selected}"), lengthValue, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        lengthValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lengthValueActionPerformed(evt);
            }
        });
        lengthValue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 4;
        lookLikePanel.add(lengthValue, gridBagConstraints);

        lengthLB.setMinimumSize(new java.awt.Dimension(70, 28));
        lengthLB.setPreferredSize(new java.awt.Dimension(70, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, lengthFixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && !selected}"), lengthLB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        lengthLB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lengthLBActionPerformed(evt);
            }
        });
        lengthLB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 4;
        lookLikePanel.add(lengthLB, gridBagConstraints);

        lengthUB.setMinimumSize(new java.awt.Dimension(70, 28));
        lengthUB.setPreferredSize(new java.awt.Dimension(70, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, lengthFixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && !selected}"), lengthUB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        lengthUB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lengthUBActionPerformed(evt);
            }
        });
        lengthUB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 15;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 4;
        lookLikePanel.add(lengthUB, gridBagConstraints);

        widthValue.setMinimumSize(new java.awt.Dimension(70, 28));
        widthValue.setPreferredSize(new java.awt.Dimension(70, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, widthFixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && selected}"), widthValue, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        widthValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                widthValueActionPerformed(evt);
            }
        });
        widthValue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 4;
        lookLikePanel.add(widthValue, gridBagConstraints);

        widthLB.setMinimumSize(new java.awt.Dimension(70, 28));
        widthLB.setPreferredSize(new java.awt.Dimension(70, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, widthFixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && !selected}"), widthLB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        widthLB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                widthLBActionPerformed(evt);
            }
        });
        widthLB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 4;
        lookLikePanel.add(widthLB, gridBagConstraints);

        widthUB.setMinimumSize(new java.awt.Dimension(70, 28));
        widthUB.setPreferredSize(new java.awt.Dimension(70, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, widthFixed, org.jdesktop.beansbinding.ELProperty.create("${enabled && !selected}"), widthUB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        widthUB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                widthUBActionPerformed(evt);
            }
        });
        widthUB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 15;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 4;
        lookLikePanel.add(widthUB, gridBagConstraints);

        lengthFixed.setSelected(true);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, lengthCB, org.jdesktop.beansbinding.ELProperty.create("${selected}"), lengthFixed, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        lengthFixed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lengthFixedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        lookLikePanel.add(lengthFixed, gridBagConstraints);

        widthFixed.setSelected(true);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, widthCB, org.jdesktop.beansbinding.ELProperty.create("${selected}"), widthFixed, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        widthFixed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                widthFixedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        lookLikePanel.add(widthFixed, gridBagConstraints);

        strikeFixed.setSelected(true);
        strikeFixed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strikeFixedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        lookLikePanel.add(strikeFixed, gridBagConstraints);

        dipFixed.setSelected(true);
        dipFixed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dipFixedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        lookLikePanel.add(dipFixed, gridBagConstraints);

        fixedLabel2.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        fixedLabel2.setText("Fixed?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        lookLikePanel.add(fixedLabel2, gridBagConstraints);

        lowerBoundLabel2.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        lowerBoundLabel2.setText("<html>Lower<br>Bound</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        lookLikePanel.add(lowerBoundLabel2, gridBagConstraints);

        upperBoundLabel2.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        upperBoundLabel2.setText("<html>Upper<br>Bound</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 15;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        lookLikePanel.add(upperBoundLabel2, gridBagConstraints);

        valueLabel2.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        valueLabel2.setText("Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        lookLikePanel.add(valueLabel2, gridBagConstraints);

        wholePanel.add(lookLikePanel);

        slipPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "What is the sense of motion on the dislocation?", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Dialog", 3, 14))); // NOI18N
        slipPanel.setMaximumSize(new java.awt.Dimension(472, 65));
        slipPanel.setMinimumSize(new java.awt.Dimension(472, 65));

        strikeSlipCB.setText("SS");
        strikeSlipCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strikeSlipCBActionPerformed(evt);
            }
        });

        SSValue.setColumns(7);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, strikeSlipCB, org.jdesktop.beansbinding.ELProperty.create("${selected}"), SSValue, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        SSValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SSValueActionPerformed(evt);
            }
        });
        SSValue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });

        dipSlipCB.setText("DS");

        DSValue.setColumns(7);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, dipSlipCB, org.jdesktop.beansbinding.ELProperty.create("${selected}"), DSValue, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        DSValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DSValueActionPerformed(evt);
            }
        });
        DSValue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });

        openingCB.setText("TS");

        TSValue.setColumns(7);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, openingCB, org.jdesktop.beansbinding.ELProperty.create("${selected}"), TSValue, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        TSValue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });

        javax.swing.GroupLayout slipPanelLayout = new javax.swing.GroupLayout(slipPanel);
        slipPanel.setLayout(slipPanelLayout);
        slipPanelLayout.setHorizontalGroup(
            slipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slipPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(strikeSlipCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SSValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(dipSlipCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DSValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(openingCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TSValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        slipPanelLayout.setVerticalGroup(
            slipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slipPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(slipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(strikeSlipCB)
                    .addComponent(SSValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dipSlipCB)
                    .addComponent(DSValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openingCB)
                    .addComponent(TSValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        wholePanel.add(slipPanel);

        distributedSlipPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "If slip is distributed, how big can subfaults be?", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Dialog", 3, 14))); // NOI18N
        distributedSlipPanel.setToolTipText("Entering size in meters, then clicking Apply, will divide the fault-segment into rectangular subfault tiles.");
        distributedSlipPanel.setMaximumSize(new java.awt.Dimension(472, 59));
        distributedSlipPanel.setMinimumSize(new java.awt.Dimension(472, 59));
        distributedSlipPanel.setPreferredSize(new java.awt.Dimension(472, 59));
        distributedSlipPanel.setLayout(new javax.swing.BoxLayout(distributedSlipPanel, javax.swing.BoxLayout.LINE_AXIS));

        dLengthLabel.setText("dLength");
        distributedSlipPanel.add(dLengthLabel);

        deltaLength.setToolTipText("Entering size in meters, then clicking Apply, will divide the fault-segment into rectangular subfault tiles.");
        deltaLength.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deltaLengthActionPerformed(evt);
            }
        });
        deltaLength.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });
        distributedSlipPanel.add(deltaLength);

        dWidthLabel.setText("dWidth");
        distributedSlipPanel.add(dWidthLabel);

        deltaWidth.setToolTipText("Entering size in meters, then clicking Apply, will divide the fault-segment into rectangular subfault tiles.");
        deltaWidth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deltaWidthActionPerformed(evt);
            }
        });
        deltaWidth.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFilledBox(evt);
            }
        });
        distributedSlipPanel.add(deltaWidth);

        applyButton.setText("Apply");
        applyButton.setToolTipText("Entering size in meters, then clicking Apply, will divide the fault-segment into rectangular subfault tiles.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, deltaLength, org.jdesktop.beansbinding.ELProperty.create("${text != null && text != \"\"}"), applyButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });
        distributedSlipPanel.add(applyButton);

        wholePanel.add(distributedSlipPanel);
        distributedSlipPanel.getAccessibleContext().setAccessibleName("Max size of subfaults");

        jScrollPane1.setViewportView(wholePanel);

        getContentPane().add(jScrollPane1);

        okayResetPanel.setMaximumSize(new java.awt.Dimension(494, 40));
        okayResetPanel.setMinimumSize(new java.awt.Dimension(494, 40));

        okayButton.setText("Okay");
        okayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okayButtonActionPerformed(evt);
            }
        });
        okayResetPanel.add(okayButton);

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        okayResetPanel.add(resetButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        okayResetPanel.add(cancelButton);

        getContentPane().add(okayResetPanel);

        bindingGroup.bind();

        pack();
    }// </editor-fold>

 
    private void aspectRatioCBActionPerformed(java.awt.event.ActionEvent evt) {                                              
}                                             

    private void lengthCBActionPerformed(java.awt.event.ActionEvent evt) {                                         
}                                        

    private void strikeValueActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void strikeLBActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void strikeUBActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void dipValueActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void dipLBActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
    }                                     

    private void dipUBActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
    }                                     

    private void aspectRatioValueActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
    }                                                

    private void aspectRatioLBActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    private void aspectRatioUBActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    private void lengthValueActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void lengthLBActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void lengthUBActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void widthValueActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void widthLBActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void widthUBActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        dispose();
    }                                            

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        resetAll();
    }                                           

    protected void okayButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        lsDialog.setVisible(false);
    }                                          

    private void endpoint1FixedActionPerformed(java.awt.event.ActionEvent evt) {                                               
    }                                              

    private void endpoint2FixedActionPerformed(java.awt.event.ActionEvent evt) {                                               
    }                                              

    private void midpointFixedActionPerformed(java.awt.event.ActionEvent evt) {                                              
    }                                             

    private void depthFixedActionPerformed(java.awt.event.ActionEvent evt) {                                           
    }                                          

    private void strikeFixedActionPerformed(java.awt.event.ActionEvent evt) {                                            
    }                                           

    private void dipFixedActionPerformed(java.awt.event.ActionEvent evt) {                                         
    }                                        

    private void aspectRatioFixedActionPerformed(java.awt.event.ActionEvent evt) {                                                 
    }                                                

    private void lengthFixedActionPerformed(java.awt.event.ActionEvent evt) {                                            
    }                                           

    private void widthFixedActionPerformed(java.awt.event.ActionEvent evt) {                                           
    }                                          

    private void unitsCBActionPerformed(java.awt.event.ActionEvent evt) {                                        
        if (unitsCB.getSelectedIndex() == 0)
            unitsAreXY = true;
        else
            unitsAreXY = false;
        zeroAll();
    }                                       

    private void specifyEndpoint2ActionPerformed(java.awt.event.ActionEvent evt) {                                                 
    }                                                

    private void endpoint1xValueFocusGained(java.awt.event.FocusEvent evt) {                                            
        this.filledXBox = endpoint1xValue;
        this.filledYBox = endpoint1yValue;
    }                                           

    private void endpoint1yValueFocusGained(java.awt.event.FocusEvent evt) {                                            
        this.filledXBox = endpoint1xValue;
        this.filledYBox = endpoint1yValue;
    }                                           

    private void endpoint1xLBFocusGained(java.awt.event.FocusEvent evt) {                                         
        this.filledXBox = endpoint1xLB;
        this.filledYBox = endpoint1yLB;
    }                                        

    private void endpoint1yLBFocusGained(java.awt.event.FocusEvent evt) {                                         
        this.filledXBox = endpoint1xLB;
        this.filledYBox = endpoint1yLB;     
    }                                        

    private void endpoint1xUBFocusGained(java.awt.event.FocusEvent evt) {                                         
        this.filledXBox = endpoint1xUB;
        this.filledYBox = endpoint1yUB;
    }                                        

    private void endpoint1yUBFocusGained(java.awt.event.FocusEvent evt) {                                         
        this.filledXBox = endpoint1xUB;
        this.filledYBox = endpoint1yUB;
     
    }                                        

    private void endpoint2xValueFocusGained(java.awt.event.FocusEvent evt) {                                            
        this.filledXBox = endpoint2xValue;
        this.filledYBox = endpoint2yValue;   
    }                                           

    private void endpoint2yValueFocusGained(java.awt.event.FocusEvent evt) {                                            
        this.filledXBox = endpoint2xValue;
        this.filledYBox = endpoint2yValue;
    }                                           

    private void endpoint2xLBFocusGained(java.awt.event.FocusEvent evt) {                                         
        this.filledXBox = endpoint2xLB;
        this.filledYBox = endpoint2yLB;
    }                                        

    private void endpoint2yLBFocusGained(java.awt.event.FocusEvent evt) {                                         
       this.filledXBox = endpoint2xLB;
        this.filledYBox = endpoint2yLB;
    }                                        

    private void endpoint2xUBFocusGained(java.awt.event.FocusEvent evt) {                                         
        this.filledXBox = endpoint2xUB;
        this.filledYBox = endpoint2yUB;
    }                                        

    private void endpoint2yUBFocusGained(java.awt.event.FocusEvent evt) {                                         
        this.filledXBox = endpoint2xUB;
        this.filledYBox = endpoint2yUB;      
    }                                        

    private void midpointxValueFocusGained(java.awt.event.FocusEvent evt) {                                           
        this.filledXBox = midpointxValue;
        this.filledYBox = midpointyValue;
    }                                          

    private void midpointyValueFocusGained(java.awt.event.FocusEvent evt) {                                           
        this.filledXBox = midpointxValue;
        this.filledYBox = midpointyValue;
    }                                          

    private void midpointxLBFocusGained(java.awt.event.FocusEvent evt) {                                        
        this.filledXBox = midpointxLB;
        this.filledYBox = midpointyLB;
    }                                       

    private void midpointyLBFocusGained(java.awt.event.FocusEvent evt) {                                        
        this.filledXBox = midpointxLB;
        this.filledYBox = midpointyLB;       
    }                                       

    private void midpointxUBFocusGained(java.awt.event.FocusEvent evt) {                                        
        this.filledXBox = midpointxUB;
        this.filledYBox = midpointyUB;
    }                                       

    private void midpointyUBFocusGained(java.awt.event.FocusEvent evt) {                                        
        this.filledXBox = midpointxUB;
        this.filledYBox = midpointyUB;      
    }                                       

    private void midpointRBActionPerformed(java.awt.event.ActionEvent evt) {                                           
    }                                          

    private void endPointsRBActionPerformed(java.awt.event.ActionEvent evt) {                                            
        midpointRBActionPerformed(evt);
    }                                           

    private void strikeSlipCBActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    public void applyButton() {}

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        applyButton();
        /*
        if (nFixed == TOTAL_FIXED) {
            if (this.enuPanel != null){
                DislocationBuilder tempBuilder = new DislocationBuilder(this);
                LLH origin = this.enuPanel.getOrigin();
                DisplacementSolver tempFault = tempBuilder.getDislocation(origin);
                List<DisplacementSolver> tempDrawer = new ArrayList<DisplacementSolver>();
                tempDrawer.add(tempFault);
                this.enuPanel.drawSourceModels(tempDrawer, Color.RED );        //TODO:  reenable this after testing (see if this helps)
            }

            if (lsDialog == null || !lsDialog.isVisible()) {
                final double lengthTotal = Double.parseDouble(lengthValue.getText());
                final double widthTotal = Double.parseDouble(widthValue.getText());
                final double dL = Double.parseDouble(deltaLength.getText());
                final double dW = Double.parseDouble(deltaWidth.getText());
                final int lengthStep = (int) Math.ceil( lengthTotal / dL );
                final int widthStep = (int) Math.ceil( widthTotal / dW );

                //lsDialog = new LeastSquaresDialog(lengthStep, widthStep);
                lsDialog.setRowsAndColumns(widthStep, lengthStep);
                lsDialog.setVisible(true);
            }
        }
        */
    }                                           

    private void DSValueActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void coordinatesAreUpperEdgeActionPerformed(java.awt.event.ActionEvent evt) {                                                        
        // TODO add your handling code here:
    }                                                       

    private void deltaLengthActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void deltaWidthActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void endpoint2yUBActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void SSValueActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void widthCBActionPerformed(java.awt.event.ActionEvent evt) {                                        
    }                                       

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void txtShearModActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void depthValueActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void SSValueFocusGained(java.awt.event.FocusEvent evt) {
        // TODO add your handling code here:
    }

    private void clearFilledBox(java.awt.event.FocusEvent evt) {
        this.filledXBox = null;
        this.filledYBox = null;
    }

    public boolean isUnitsAreXY() {
        return unitsAreXY;
    }
    
    public boolean IsCoordinatesAreUpperEdge() {
        return coordinatesAreUpperEdge.isSelected();
    }

    protected void setFixed(boolean isFixed, JTextField value, JTextField lb, JTextField up) {
        value.setEnabled(isFixed);
        lb.setEnabled(!isFixed);
        up.setEnabled(!isFixed);
    }

    private void zeroAll() {
        endpoint1xValue.setText(null);
        endpoint1xLB.setText(null);
        endpoint1xUB.setText(null);
        endpoint1yValue.setText(null);
        endpoint1yLB.setText(null);
        endpoint1yUB.setText(null);
        endpoint2xValue.setText(null);
        endpoint2xLB.setText(null);
        endpoint2xUB.setText(null);
        endpoint2yValue.setText(null);
        endpoint2yLB.setText(null);
        endpoint2yUB.setText(null);
        midpointxValue.setText(null);
        midpointxLB.setText(null);
        midpointxUB.setText(null);
        midpointyValue.setText(null);
        midpointyLB.setText(null);
        midpointyUB.setText(null);
        depthValue.setText(null);
        depthLB.setText(null);
        depthUB.setText(null);

        strikeValue.setText(null);
        strikeLB.setText(null);
        strikeUB.setText(null);
        dipValue.setText(null);
        dipLB.setText(null);
        dipUB.setText(null);
    }

    private void resetAll() {
        zeroAll();

        endPointsRB.setSelected(true);

        endpoint1Fixed.setSelected(true);
        setFixed(true, endpoint1xValue, endpoint1xLB, endpoint1xUB);
        setFixed(true, endpoint1yValue, endpoint1yLB, endpoint1yUB);

        specifyEndpoint2.setSelected(true);

        endpoint2Fixed.setSelected(true);
        setFixed(true, endpoint2xValue, endpoint2xLB, endpoint2xUB);
        setFixed(true, endpoint2yValue, endpoint2yLB, endpoint2yUB);

        midpointFixed.setSelected(true);
        setFixed(true, midpointxValue, midpointxLB, midpointxUB);
        setFixed(true, midpointyValue, midpointyLB, midpointyUB);
        midpointxValue.setEnabled(false);
        midpointyValue.setEnabled(false);

        depthFixed.setSelected(true);
        setFixed(true, depthValue, depthLB, depthUB);

        coordinatesAreUpperEdge.setSelected(true);

        strikeFixed.setSelected(true);
        setFixed(strikeFixed.isSelected(), strikeValue, strikeLB, strikeUB);

        dipFixed.setSelected(true);
        setFixed(dipFixed.isSelected(), dipValue, dipLB, dipUB);

        aspectRatioFixed.setSelected(true);
        setFixed(aspectRatioFixed.isSelected(), aspectRatioValue, aspectRatioLB, aspectRatioUB);

        lengthFixed.setSelected(true);
        setFixed(lengthFixed.isSelected(), lengthValue, lengthLB, lengthUB);

        widthFixed.setSelected(true);
        setFixed(widthFixed.isSelected(), widthValue, widthLB, widthUB);

        strikeSlipCB.setSelected(false);
        dipSlipCB.setSelected(false);
        openingCB.setSelected(false);
    }

    public void mouseClick(Point2D.Double coords, boolean isLatLng) {
        // TODO
        String x, y;
        if (isLatLng) {
            x = String.format("%4.5f", coords.x);
            y = String.format("%4.5f", coords.y);
        } else {
            x = String.format("%4.2f", coords.x);
            y = String.format("%4.2f", coords.y);
        }

      
    }

    
    
    /*
    @Override
    public void showSource(DisplacementSolver sourceIn, int modelIndex) {
        // TODO Make this fully functional and less hackish
        if (sourceIn == null) return;
        
        this.modelIndex = modelIndex;
        this.createNew = false;
        
        //resetAll();
        
        Fault faultIn = (Fault) sourceIn;
        
        //now put the stuff in leaving the bounds alone
        this.endpoint1xValue.setText(String.format("%.2f", faultIn.getX1()));
        this.endpoint1yValue.setText(String.format("%.2f", faultIn.getY1()));
        this.endpoint2xValue.setText(String.format("%.2f", faultIn.getX2()));
        this.endpoint2yValue.setText(String.format("%.2f", faultIn.getY2()));
        this.midpointxValue.setText(String.format("%.2f", faultIn.getLowerXC()));
        this.midpointyValue.setText(String.format("%.2f", faultIn.getLowerYC()));
        this.depthValue.setText(String.format("%.2f", faultIn.getDepth()));
        this.coordinatesAreUpperEdge.setSelected(faultIn.isTopCoords());
        
        this.strikeValue.setText(String.format("%.2f", faultIn.getStrike()));
        this.dipValue.setText(String.format("%.2f", faultIn.getDip()));
        this.aspectRatioValue.setText(String.format("%.2f", faultIn.getAspectRatio()));
        this.lengthValue.setText(String.format("%.2f", faultIn.getLength()));
        this.widthValue.setText(String.format("%.2f", faultIn.getWidth()));
        
        double ss = faultIn.getStrikeSlip();
        double ds = faultIn.getDipSlip();
        double ts = faultIn.getOpening();
                
        if ( Math.abs(ss) != 0d){
            SSValue.setText(String.format("%.3e", ss));
            strikeSlipCB.setSelected(true);
        }
        
        if (Math.abs(ds) != 0d){
            DSValue.setText(String.format("%.3e", ds));
            this.dipSlipCB.setSelected(true);
        }
        
        if (Math.abs(ts) != 0d){
            TSValue.setText(String.format("%.3e", ts));
            this.openingCB.setSelected(true);
        }
        
        if ( sourceIn instanceof DistributedFault){     //TODO: also do the subdialog
            DistributedFault dFault = (DistributedFault) sourceIn;
            this.deltaLength.setText(String.format("%.2f", dFault.getdLength()));
            this.deltaWidth.setText(String.format("%.2f", dFault.getdWidth()));
        }
        
        okayButton.setText("Save");
        setTitle("Edit a dislocation");
        this.setVisible(true);
    }
    
    @Override
    public int getModelIndex() {
        return this.modelIndex;
    }

    @Override
    public boolean isCreateNew() {
        return this.createNew;
    }
    */

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    for (javax.swing.UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                        if ("Nimbus".equals(info.getName())) {
                            UIManager.setLookAndFeel(info.getClassName());
                            break;
                        }
                    }
                } catch (Exception e) {
                    System.err.println(e);
                    e.printStackTrace();
                }
                DislocationDialog dialog = new DislocationDialog(new javax.swing.JFrame());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify
    public javax.swing.JTextField DSValue;
    public javax.swing.JTextField SSValue;
    public javax.swing.JTextField TSValue;
    public javax.swing.JButton applyButton;
    public javax.swing.JCheckBox aspectRatioCB;
    public javax.swing.JCheckBox aspectRatioFixed;
    public javax.swing.JTextField aspectRatioLB;
    public javax.swing.JTextField aspectRatioUB;
    public javax.swing.JTextField aspectRatioValue;
    private javax.swing.JButton cancelButton;
    public javax.swing.JCheckBox coordinatesAreUpperEdge;
    private javax.swing.JLabel dLengthLabel;
    private javax.swing.JLabel dWidthLabel;
    public javax.swing.JTextField deltaLength;
    public javax.swing.JTextField deltaWidth;
    public javax.swing.JCheckBox depthFixed;
    public javax.swing.JTextField depthLB;
    public javax.swing.JLabel depthLabel;
    private javax.swing.JPanel depthPanel;
    public javax.swing.JTextField depthUB;
    public javax.swing.JTextField depthValue;
    public javax.swing.JCheckBox dipFixed;
    public javax.swing.JTextField dipLB;
    public javax.swing.JLabel dipLabel;
    public javax.swing.JCheckBox dipSlipCB;
    public javax.swing.JTextField dipUB;
    public javax.swing.JTextField dipValue;
    private javax.swing.JPanel distributedSlipPanel;
    private javax.swing.JPanel endPointsPanel;
    public javax.swing.JRadioButton endPointsRB;
    public javax.swing.JCheckBox endpoint1Fixed;
    public javax.swing.JTextField endpoint1xLB;
    public javax.swing.JLabel endpoint1xLabel;
    public javax.swing.JTextField endpoint1xUB;
    public javax.swing.JTextField endpoint1xValue;
    public javax.swing.JTextField endpoint1yLB;
    public javax.swing.JLabel endpoint1yLabel;
    public javax.swing.JTextField endpoint1yUB;
    public javax.swing.JTextField endpoint1yValue;
    public javax.swing.JCheckBox endpoint2Fixed;
    public javax.swing.JTextField endpoint2xLB;
    public javax.swing.JLabel endpoint2xLabel;
    public javax.swing.JTextField endpoint2xUB;
    public javax.swing.JTextField endpoint2xValue;
    public javax.swing.JTextField endpoint2yLB;
    public javax.swing.JLabel endpoint2yLabel;
    public javax.swing.JTextField endpoint2yUB;
    public javax.swing.JTextField endpoint2yValue;
    private javax.swing.ButtonGroup endpointsBG;
    public javax.swing.JLabel endpointsOrMidpointLabel;
    public javax.swing.JLabel fixedLabel;
    public javax.swing.JLabel fixedLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labName;
    private javax.swing.JLabel labShearMod;
    public javax.swing.JCheckBox lengthCB;
    public javax.swing.JCheckBox lengthFixed;
    public javax.swing.JTextField lengthLB;
    public javax.swing.JTextField lengthUB;
    public javax.swing.JTextField lengthValue;
    private javax.swing.JPanel lookLikePanel;
    public javax.swing.JLabel lowerBoundLabel;
    public javax.swing.JLabel lowerBoundLabel2;
    private javax.swing.JPanel midPointPanel;
    public javax.swing.JCheckBox midpointFixed;
    public javax.swing.JRadioButton midpointRB;
    public javax.swing.JTextField midpointxLB;
    public javax.swing.JLabel midpointxLabel;
    public javax.swing.JTextField midpointxUB;
    public javax.swing.JTextField midpointxValue;
    public javax.swing.JTextField midpointyLB;
    public javax.swing.JLabel midpointyLabel;
    public javax.swing.JTextField midpointyUB;
    public javax.swing.JTextField midpointyValue;
    private javax.swing.JPanel namePanel;
    public javax.swing.JButton okayButton;
    private javax.swing.JPanel okayResetPanel;
    public javax.swing.JCheckBox openingCB;
    public javax.swing.JLabel orientationLabel;
    private javax.swing.JPanel point1Panel;
    private javax.swing.JPanel point2Panel;
    private javax.swing.JButton resetButton;
    public javax.swing.JLabel selectTwoLabel;
    private javax.swing.JPanel slipPanel;
    public javax.swing.JLabel specifyDimensionsLabel;
    public javax.swing.JCheckBox specifyEndpoint2;
    public javax.swing.JCheckBox strikeFixed;
    public javax.swing.JTextField strikeLB;
    public javax.swing.JLabel strikeLabel;
    public javax.swing.JCheckBox strikeSlipCB;
    public javax.swing.JTextField strikeUB;
    public javax.swing.JTextField strikeValue;
    protected javax.swing.JTextField txtName;
    public javax.swing.JTextField txtShearMod;
    private javax.swing.JComboBox unitsCB;
    private javax.swing.JLabel unitsLabel;
    public javax.swing.JLabel upperBoundLabel;
    public javax.swing.JLabel upperBoundLabel2;
    public javax.swing.JLabel valueLabel;
    public javax.swing.JLabel valueLabel2;
    private javax.swing.JPanel whereIsDislocPanel;
    private javax.swing.JPanel wholePanel;
    public javax.swing.JCheckBox widthCB;
    public javax.swing.JCheckBox widthFixed;
    public javax.swing.JTextField widthLB;
    public javax.swing.JTextField widthUB;
    public javax.swing.JTextField widthValue;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration
}
